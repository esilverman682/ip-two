{"version":3,"file":"use-tweaks.cjs.development.js","sources":["../src/types.ts","../src/data.ts","../src/useTweaks.ts","../src/helpers.ts"],"sourcesContent":["import { InputParams, MonitorParams } from 'tweakpane/dist/types/api/types'\nimport { TweakpaneConfig } from 'tweakpane/dist/types/tweakpane-config'\nimport { FolderApi } from 'tweakpane/dist/types/api/folder'\nimport Tweakpane from 'tweakpane'\nimport { InputtableOutType } from 'tweakpane/dist/types/controller/binding-creators/input'\n\nexport type TweakpaneType = Tweakpane | FolderApi\n\nexport enum SpecialInputTypes {\n  SEPARATOR,\n  FOLDER,\n  BUTTON,\n  MONITOR,\n}\n\nexport type InputConstructor = InputParams & { value: InputtableOutType }\n\nexport interface Schema {\n  [name: string]: InputtableOutType | InputConstructor | Folder | Separator\n}\n\nexport type Settings = Omit<TweakpaneConfig, 'container'> & { container?: React.RefObject<HTMLElement> }\n\nexport interface Monitor {\n  type: SpecialInputTypes\n  title: string\n  ref: any | React.Ref<any> | (() => any)\n  settings: MonitorParams\n}\n\nexport interface Folder<T extends Schema = Schema> {\n  type: SpecialInputTypes\n  title: string\n  schema: T\n  settings: { expanded: boolean }\n}\n\nexport interface Separator {\n  type: SpecialInputTypes\n}\n\nexport interface Button {\n  type: SpecialInputTypes\n  title: string\n  onClick: () => void\n}\n\ntype Join<T, K extends keyof T, P> = '' extends P ? { [i in K]: T[K] } : P\n\n// can probably be optimized ¯\\_(ツ)_/¯\ntype Leaves<T, P extends string | number | symbol = ''> = {\n  0: T extends { schema: any } ? Join<T, 'schema', Leaves<T['schema']>> : never\n  1: T extends { value: any } ? { [i in P]: T['value'] } : never\n  2: never\n  3: { [i in P]: T }\n  4: { [K in keyof T]: Join<T, K, Leaves<T[K], K>> }[keyof T]\n  5: ''\n}[T extends Folder\n  ? 0\n  : T extends InputConstructor\n  ? 1\n  : T extends Separator | Button\n  ? 2\n  : T extends object\n  ? T extends InputtableOutType\n    ? 3\n    : 4\n  : 5]\n\n/**\n * It does nothing but beautify union type\n *\n * ```\n * type A = { a: 'a' } & { b: 'b' } // { a: 'a' } & { b: 'b' }\n * type B = Id<{ a: 'a' } & { b: 'b' }> // { a: 'a', b: 'b' }\n * ```\n */\ntype Id<T> = T extends infer TT ? { [k in keyof TT]: TT[k] } : never\n\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never\n\nexport type UseTweaksValues<T> = Id<UnionToIntersection<Leaves<T>>>\n\n/*\nfunction useTweaks<T>(schema: T): UseTweaksValues<T> {\n  // @ts-ignore\n  return schema\n}\nconst b = useTweaks({\n  b: 3,\n  _2323: { type: SpecialInputTypes.SEPARATOR },\n  h: { value: 32, min: 0 },\n  _31: {\n    type: SpecialInputTypes.FOLDER,\n    title: 'folder2',\n    schema: {\n      d: 'al',\n      f: 3,\n      position: { value: { x: 0, y: 0 }, min: { x: -1, y: -1 }, max: { x: 1, y: 1 } },\n      color: { r: 255, g: 255, b: 255, a: 1 },\n      offset: { x: 50, y: 25 },\n      _33: {\n        type: SpecialInputTypes.FOLDER,\n        title: 'folder',\n        schema: { c: { value: 'al' }, k: 4 },\n        settings: { expanded: false },\n      },\n    },\n    settings: { expanded: false },\n  },\n})\n*/\n","import { SpecialInputTypes } from './types'\n// @ts-expect-error\nimport get from 'get-value'\n// @ts-expect-error\nimport set from 'set-value'\nimport { Schema, Folder, Button, InputConstructor, TweakpaneType, Monitor } from './types'\nimport { InputParams } from 'tweakpane/dist/types/api/types'\nimport { InputBindingApi } from 'tweakpane/dist/types/api/input-binding'\nimport { ButtonApi } from 'tweakpane/dist/types/api/button'\nimport { SeparatorApi } from 'tweakpane/dist/types/api/separator'\nimport { noCase } from 'change-case'\n\nfunction transformSettings(settings: InputParams) {\n  if (!('options' in settings)) return settings\n\n  if (Array.isArray(settings.options)) {\n    // @ts-expect-error\n    settings.options = settings.options.reduce((acc, option) => ({ ...acc, [option]: option }), {})\n  }\n  return settings\n}\n\ntype Disposable = TweakpaneType | ButtonApi | SeparatorApi | InputBindingApi<any, any>\n\n// DATA will be in the form of\n// DATA = {\n//   root : {\n//     inputs: { input1: value1, input2: value2, ...},\n//     folder1 : {\n//       inputs: { input3: value3, ...}\n//       folder11 : { ... }\n//     },\n//     folder 2 : { ... }\n//     ...\n//   }\n// }\nconst DATA: any = { root: {} }\n\n// this function traverses the schema and sets the initial input values.\n// - if the global DATA object already holds a key matching the schema input,\n//   then the DATA object key value is used as the initial value.\n// - if the global DATA object key is empty, then the DATA object key is\n//   initialized with the schema value.\nexport function getData(schema: Schema, rootPath: string) {\n  const data: Record<string, unknown> = Object.entries(schema).reduce((accValues, [key, input]) => {\n    // the path to the inputs of object in nested folders\n    // we use set and get to access paths such as\n    // DATA.global.folder.nestedFolder.inputs\n    let INPUTS = get(DATA, `${rootPath}.inputs`)\n    // if INPUTS doesn't exist it means that the folder doesn't exist yet,\n    // therefore we need to initialize it first\n    if (!INPUTS) {\n      INPUTS = {}\n      set(DATA, `${rootPath}.inputs`, INPUTS)\n    }\n\n    if (typeof input === 'object') {\n      // Handles any tweakpane object that's not an actual Input\n      if ('type' in input) {\n        // if the input type is a Folder, then we recursively add the folder schema\n        if (input.type === SpecialInputTypes.FOLDER) {\n          const { title, schema } = input as Folder\n          return { ...accValues, ...getData(schema, `${rootPath}.${title}`) }\n        }\n        return { ...accValues }\n      }\n      // if the input is an actual value then we get its value from the\n      // DATA object, and if it isn't set, we set it to the schema value\n      else if ('value' in input) {\n        // input is shaped as in input = { value: value, ...settings}\n        INPUTS[key] = INPUTS[key] ?? (input as InputConstructor).value\n      } else {\n        // input is an object but is shaped as in input = { x: 0, y: 0 }\n        INPUTS[key] = INPUTS[key] ?? input\n      }\n      return { ...accValues, [key]: INPUTS[key] }\n    }\n    // same as above, only this time the input is shaped as in { key: value }\n    // instead of { key: { value: value } }\n    INPUTS[key] = INPUTS[key] ?? input\n    return { ...accValues, [key]: INPUTS[key] }\n  }, {})\n\n  return data\n}\n\n// this function acts similarly to the getData function, only\n// this time the DATA object should be fully initialized, therefore\n// we read its values are used to initialize Tweakpane.\n// It also returns an array of top-level panes that will need to be disposed\n// when the component is unmounted. Note that we only need top-level panes\n// as nested panes will be disposed when their parents are.\nexport function buildPane(\n  schema: Schema,\n  rootPath: string,\n  setValue: (key: string, value: unknown) => void,\n  rootPane: TweakpaneType\n) {\n  // nestedPanes will hold the top level folder references that\n  // will need to be disposed in useTweaks\n  const nestedPanes: Disposable[] = []\n\n  // we read the inputs of the nested path\n  let INPUTS = get(DATA, `${rootPath}.inputs`)\n\n  Object.entries(schema).forEach(([key, input]) => {\n    if (typeof input === 'object') {\n      if ('type' in input) {\n        if (input.type === SpecialInputTypes.MONITOR) {\n          const { title, ref, settings } = input as Monitor\n          let monitor\n          if (typeof ref === 'function') {\n            const myObj = { current: ref() }\n            const updateFn = () => (myObj.current = ref())\n\n            monitor = rootPane.addMonitor(myObj, 'current', { label: title, ...settings }).on('update', updateFn)\n          } else if ('current' in ref) {\n            monitor = rootPane.addMonitor(ref, 'current', { label: title, ...settings })\n          } else {\n            monitor = rootPane.addMonitor(ref, title, settings)\n          }\n          nestedPanes.push(monitor)\n        } else if (input.type === SpecialInputTypes.FOLDER) {\n          // if the input is a Folder, we recursively add the folder structure\n          // to Tweakpane\n          const { title, settings, schema } = input as Folder\n          const folderPane = rootPane.addFolder({ title, ...settings })\n          nestedPanes.push(folderPane)\n          buildPane(schema, `${rootPath}.${title}`, setValue, folderPane)\n        } else if (input.type === SpecialInputTypes.BUTTON) {\n          // Input is a Button\n          const { title, onClick } = input as Button\n          if (typeof onClick !== 'function') throw new Error('Button onClick must be a function.')\n          const button = rootPane.addButton({ title }).on('click', onClick)\n          nestedPanes.push(button)\n        } else if (input.type === SpecialInputTypes.SEPARATOR) {\n          // Input is a separator\n          const separator = rootPane.addSeparator()\n          nestedPanes.push(separator)\n        }\n      } else {\n        const { value, ...settings } = input as InputConstructor\n        const _settings = value !== undefined ? transformSettings(settings) : undefined\n        // we add the INPUTS object to Tweakpane and we listen to changes\n        // to trigger setValue, which will set the useTweaks hook state.\n        const pane = rootPane\n          .addInput(INPUTS, key, { label: noCase(key), ..._settings })\n          .on('change', v => setValue(key, v))\n        nestedPanes.push(pane)\n      }\n    } else {\n      const pane = rootPane.addInput(INPUTS, key, { label: noCase(key) }).on('change', v => setValue(key, v))\n      nestedPanes.push(pane)\n    }\n  }, {})\n\n  return nestedPanes\n}\n","import { useState, useLayoutEffect, useRef } from 'react'\nimport Tweakpane from 'tweakpane'\n\nimport { getData, buildPane } from './data'\nimport { Schema, Settings, UseTweaksValues } from './types'\n\nlet ROOTPANE: Tweakpane | undefined\n\nexport function useTweaks<T extends Schema>(schema: T, settings?: Settings): UseTweaksValues<T>\nexport function useTweaks<T extends Schema>(name: string, schema: T, settings?: Settings): UseTweaksValues<T>\nexport function useTweaks<T extends Schema>(\n  nameOrSchema: string | T,\n  schemaOrSettings?: T | Settings | undefined,\n  settings?: Settings\n): UseTweaksValues<T> {\n  const _name = typeof nameOrSchema === 'string' ? nameOrSchema : undefined\n  const _rootKey = typeof nameOrSchema === 'string' ? 'root.' + nameOrSchema : 'root'\n  const _settings = useRef(typeof nameOrSchema === 'string' ? settings : (schemaOrSettings as Settings))\n  const _schema = useRef(typeof nameOrSchema === 'string' ? (schemaOrSettings as T) : nameOrSchema)\n\n  const [data, set] = useState(() => getData(_schema.current, _rootKey))\n\n  useLayoutEffect(() => {\n    ROOTPANE = ROOTPANE || new Tweakpane({ ..._settings, container: _settings.current?.container?.current! })\n    const isRoot = _name === undefined\n    const _pane = _name ? ROOTPANE.addFolder({ title: _name }) : ROOTPANE\n    const setValue = (key: string, value: unknown) => set(data => ({ ...data, [key]: value }))\n    const disposablePanes = buildPane(_schema.current, _rootKey, setValue, _pane)\n\n    return () => {\n      if (!isRoot) _pane.dispose()\n      // we only need to dispose the parentFolder\n      else disposablePanes.forEach(d => d.dispose())\n    }\n  }, [_name, _rootKey])\n\n  return data as UseTweaksValues<T>\n}\n","import { MonitorParams } from 'tweakpane/dist/types/api/types'\nimport { SpecialInputTypes, Schema, Separator, Folder, Button, Monitor } from './types'\n\nlet separatorCount = 0\n\nexport function makeSeparator(): Record<string, Separator> {\n  return {\n    [`_s_${separatorCount++}`]: { type: SpecialInputTypes.SEPARATOR },\n  }\n}\n\nexport function makeFolder<T extends Schema, P extends string>(title: P, schema: T, expanded = true) {\n  return ({\n    [`_f_${title}`]: { type: SpecialInputTypes.FOLDER, title, schema, settings: { expanded } },\n  } as unknown) as Record<P, Folder<T>>\n}\n\nexport const makeDirectory = makeFolder\n\nexport function makeButton(title: string, onClick: () => void): Record<string, Button> {\n  return {\n    [`_b_${title}`]: { type: SpecialInputTypes.BUTTON, title, onClick },\n  }\n}\n\nexport function makeMonitor(\n  title: string,\n  ref: any | React.Ref<any> | (() => any),\n  settings: MonitorParams\n): Record<string, Monitor> {\n  return {\n    [`_m_${title}`]: {\n      type: SpecialInputTypes.MONITOR,\n      title,\n      ref,\n      settings,\n    },\n  }\n}\n"],"names":["SpecialInputTypes","transformSettings","settings","Array","isArray","options","reduce","acc","option","DATA","root","getData","schema","rootPath","data","Object","entries","accValues","key","input","INPUTS","get","set","type","FOLDER","title","value","buildPane","setValue","rootPane","nestedPanes","forEach","MONITOR","ref","monitor","myObj","current","updateFn","addMonitor","label","on","push","folderPane","addFolder","BUTTON","onClick","Error","button","addButton","SEPARATOR","separator","addSeparator","_settings","undefined","pane","addInput","noCase","v","ROOTPANE","useTweaks","nameOrSchema","schemaOrSettings","_name","_rootKey","useRef","_schema","useState","useLayoutEffect","Tweakpane","container","isRoot","_pane","disposablePanes","dispose","d","separatorCount","makeSeparator","makeFolder","expanded","makeDirectory","makeButton","makeMonitor"],"mappings":"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"}